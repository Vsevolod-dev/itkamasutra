{"version":3,"sources":["components/hoc/WithAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","id","src","img","alt","name","MessageItem","className","classes","dialog","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogPage","dialogs","users","map","d","key","avatar","messages","m","dialogItem","values","addMessage","newMessageBody","compose","dispatch","addMessageActionCreator"],"mappings":"6MAIIA,EAAkB,SAACC,GAAD,MAAY,CAC9BC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAStC,OAFiCM,YAAQX,EAARW,CAAyBL,K,oBCf9DM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,OAAS,wBAAwB,SAAW,4B,qHCc3HC,EAXI,SAAAN,GACf,OACI,6BACI,kBAAC,IAAD,CAASC,GAAI,YAAcD,EAAMO,IAC7B,yBAAKC,IAAKR,EAAMS,IAAKC,IAAK,YACzBV,EAAMW,Q,kBCFRC,EAJK,SAAAZ,GAChB,OAAO,yBAAKa,UAAWC,IAAQC,QAASf,EAAMgB,U,kCCI5CC,EAAcC,YAAiB,IAuC/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAjBL,SAAApB,GACnB,OACI,0BAAMsB,SAAUtB,EAAMuB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXf,KAAM,iBACNgB,YAAa,qBACbC,SAAU,CAACC,IAAUZ,MAGhC,6BACI,oDAQDa,EAvCC,SAAC9B,GACb,IAAIP,EAAQO,EAAM+B,WACZC,EAAUvC,EAAMwC,MAAMC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYxB,KAAMwB,EAAExB,KAAMyB,IAAKD,EAAE5B,GAAIA,GAAI4B,EAAE5B,GAAIE,IAAK0B,EAAEE,YACrFC,EAAW7C,EAAM6C,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAavB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAEhC,GAAIA,GAAIgC,EAAEhC,QAG3F,OACI,yBAAKM,UAAWC,IAAQkB,SACpB,yBAAKnB,UAAWC,IAAQ0B,YACnBR,GAEL,yBAAKnB,UAAWC,IAAQwB,UACnBA,EACD,kBAACnB,EAAD,CAAqBG,SATX,SAACmB,GAAD,OAAYzC,EAAM0C,WAAWD,EAAOE,sB,wBCM/CC,sBAAQzC,aAdC,SAACV,GACrB,MAAO,CACHsC,WAAYtC,EAAMsC,eAIC,SAACc,GACxB,MAAO,CACHH,WAAY,SAACC,GACTE,EAASC,YAAwBH,SAKwB/C,IAAtDgD,CAAwEd","file":"static/js/4.cae42033.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props} />;\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__k73i1\",\"dialogItem\":\"Dialogs_dialogItem__1hqz9\",\"active\":\"Dialogs_active__1bBz_\",\"messages\":\"Dialogs_messages__2dGqv\"};","import React from \"react\";\r\n//import classes from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = props => {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/dialogs/' + props.id}>\r\n                <img src={props.img} alt={'cartoon'}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./MessageItem.module.css\"\r\n\r\nconst MessageItem = props => {\r\n    return <div className={classes.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default MessageItem;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport MessageItem from \"./Message/MessageItem\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../assets/OwnElements/OwnElements\";\r\nimport {maxLengthCreator, required} from \"../../utils/validator/validators\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogPage\r\n    const dialogs = state.users.map(d => <DialogItem name={d.name} key={d.id} id={d.id} img={d.avatar}/>)\r\n    const messages = state.messages.map(m => <MessageItem message={m.message} key={m.id} id={m.id}/>)\r\n    const addNewMessage = (values) => props.addMessage(values.newMessageBody)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItem}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messages}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import {addMessageActionCreator} from \"../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)"],"sourceRoot":""}